## 算法设计与技巧

### 一 分而治之
> 分解员问题为多个子问题
> 解决子问题，用返回解决子问题的方式的递归算法
> 组合这些子问题的解决方式，得到原问题的解
之前13章节的快速排序就是分而治之的实现，二分查找也可以使用分而治之的方式来实现

```
function defaultCompare (e,n){
  return e === n ? 0 : e < n ? -1 : 1
}
function binarySearchRecursive(array, value, low, high, compareFn = defaultCompare) {
  if (low <= high) {
    const mid = Math.floor((low + high) / 2)
    const element = array[mid]
    if (compareFn(element, value) === -1) {
      return binarySearchRecursive(array, value, mid+1, high, compareFn)
    } else if (compareFn(element, value) === 1) {
      return binarySearchRecursive(array, value, low, mid-1, compareFn)
    } else {
      return mid
    }
  }
  // 若没有找到该值
  return -1
}
function binarySearch(array, value, compareFn = defaultCompare) {
  const sortedArray = quickSort();
  const low = 0
  const high = sortedArray.length - 1
  return binarySearchRecursive(array, value, low, high, compareFn)
}

const array = [1,3,4,5,6,8,12,17,19,21,22,26]
console.log('--------', binarySearch(array, 12))
```

### 二 动态规划，是一种将复杂问题分解成更小的子问题来解决的（如斐波那契问题）
> 定义子问题
> 实现要反复执行来解决子问题的部分
> 识别并求解出基线条件

能用动态规划解决的一些著名问题
1. 最少硬币找零问题，给出要找零的钱数，以及可以用的硬币的面额d1,d2,...,dn及数量，找出有多少种找零的方法，找到所需最少硬币个数的方法；
```
// 最小硬币问题,coins代表面额值的数组eg[1,3,4]，amount=6
function minCoinChange(coins, amount){
  const cache = []
  const makeChange = (value) => {
    if (!value) {
      return []
    }
    if (cache[value]) {
      return cache[value]
    }
    let min = []
    let newMin
    let newAmount
    for (let i = 0; i < coins.length; i++) {
      const coin = coins[i]
      newAmount = value - coin
      if (newAmount >= 0) {
        newMin = makeChange(newAmount)
      }
      if (newAmount >= 0 && 
        (newMin.length < min.length -1 || !min.length) &&
        (newMin.length || !newAmount)
        ) {
          min = [coin].concat(newMin)
          console.log('new Min ', min, ' for', amount)
      }
    }
    return (cache[value] = min)
  }
  return makeChange(amount)
}
// console.log(minCoinChange([1, 5, 10, 25], 36))
console.log(minCoinChange([1, 3, 4], 6))
// new Min  [1]  for 6
// new Min  (2) [1, 1]  for 6
// new Min  (3) [1, 1, 1]  for 6
// new Min  [3]  for 6
// new Min  (2) [1, 3]  for 6
// new Min  [4]  for 6
// new Min  (2) [1, 4]  for 6
// new Min  (3) [1, 1, 4]  for 6
// new Min  (2) [3, 3]  for 6
// (2) [3, 3]
```

2. 背包问题:给定一个固定大小，能够携重量W的背包，以及一组有价值和重量的物品，找出最佳方案使得装入背包的物品总重量不超过W，且总价值最大；
```
function findValues(n, capacity, ks, weights,values) {
  let i = n;
  let k = capacity
  console.log('构成解的物品：')
  while(i > 0 && k > 0){
    if(ks[i][k] != ks[i-1][k]) {
      console.log(`物品${i}可以是解的一部分w,v:${weights[i-1]}, ${values[i-1]}`)
      i--
      k -= ks[i][k]
    } else {
      i--
    }
  }
}
function knapSack(capacity, weights, values, n) {
  const ks = []
  for (let i = 0; i <= n; i++) {
    ks[i] = []
  }

  for (let i = 0; i <= n; i++) {
    for (let w = 0; w <= capacity; w++) {
      if (i === 0 || w === 0) {
        ks[i][w] = 0
      } else if (weights[i-1] <= w) {
        const a = values[i-1] + ks[i-1][w-weights[i-1]]
        const b = ks[i-1][w]
        ks[i][w]  = a > b ? a : b
      } else {
        ks[i][w] = ks[i-1][w]
      }
    }
  }
  findValues(n, capacity, ks, weights,values)
  return ks[n][capacity]
}
const values = [3,4,5],
weights = [2,3,4],
capacity = 5,
n = values.length
console.log(knapSack(capacity, weights, values, n))
// 构成解的物品：
// 物品2可以是解的一部分w,v:3, 4
// 物品1可以是解的一部分w,v:2, 3
// 7
```
3. 最长公共子序列（LCS）：找出两个字符串序列的最长子序列长度，eg  串1：acbaed  串二：abcadf ，LCS:acad 在串一中 有ac a d，而串2中有a cad；

4. 矩阵相乘

### 三 贪心算法
